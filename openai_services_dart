import 'dart:convert';

import 'package:http/http.dart' as http;
import 'package:omega_talk/secrets.dart';
class OpenAIService{
  final List<Map<String,String>> message = [];
  Future<String> isArtPromptAPI(String promt) async{
    try{
     final res = await http.post
        (Uri.parse('https://api.openai.com/v1/chat/completions'),
       headers: {
          'Content-Type': 'application/json',
         'Authorization' : 'Bearer $openAIAPIKey',
       },
       body: jsonEncode({
         "model": "gpt-3.5-turbo",
         "messages" : [
           {
             'role' : 'user',
             'content' :
             'Does this message want to generate an AI picture , image,art or anything similar ? $promt . Simply answer with a yes or no.',
           }
         ],
       }),
      );
     print(res.body);
     if(res.statusCode == 200){
       String content =
           jsonDecode(res.body)['choices'][0]['message']['content'];
       content = content.trim();
       switch(content){
         case 'Yes':
         case 'yes':
           case 'Yes.':
             case 'yes.':
               final res = await dallEAPT(promt);
               return res;
         default:
           final res = await chatGPTAPI(promt);
           return res;

       }
     }
     return 'An internal error occurred';
    }catch (e){
      return e.toString();
    }
  }
  Future<String> chatGPTAPI(String promt) async{
    var messages;
    messages.add({
      'role':'user',
      'content': promt,
    });
    try{
      final res = await http.post
        (Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization' : 'Bearer $openAIAPIKey',
        },
        body: jsonEncode({
          "model": "gpt-3.5-turbo",
          "messages" : messages,
        }),
      );
      if(res.statusCode == 200){
        String content =
        jsonDecode(res.body)['choices'][0]['message']['content'];
        content = content.trim();
        messages.add({
          'role':'assistant',
          'content':content,
        });
        return content;
      }
      return 'An internal error occurred';
    }catch (e){
      return e.toString();
    }
  }
  Future<String> dallEAPT(String promt) async{
    var messages;
    messages.add({
      'role':'user',
      'content': promt,
    });
    try{
      final res = await http.post
        (Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization' : 'Bearer $openAIAPIKey',
        },
        body: jsonEncode({
          'prompt':promt,
          'n':1,
        }),
      );
      if(res.statusCode == 200){
        String imageUrl =
        jsonDecode(res.body)['data'][0]['url'];
        var iamgeUrl = imageUrl.trim();
        messages.add({
          'role':'assistant',
          'content':imageUrl,
        });
        return imageUrl;
      }
      return 'An internal error occurred';
    }catch (e){
      return e.toString();
    }
  }
}
